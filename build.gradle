plugins {
    // El plugin application aplica automaticamente el plugin de java, por lo que no es necesario aplicar ambos
    id 'application'
    id 'java' // Plugin de java para trabajar con la JVM (complemento principal, no requiere version)
    /* Los 2 tipos principales de componentes de software Java que puede crear son aplicaciones y bibliotecas. Para crear 
     * una biblioteca que sera consumida por otros proyectos de Java, aplique el plugin java-library. */
    // id 'java-library'
}

task runApp(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath // El classpath para ejecutar la clase principal
  mainClass = 'com.craivet.ProyectoGradle' // El nombre completo de la clase principal que se va a ejecutar
  args 'Rulo tostado' // Argumentos para pasar a la aplicacion
}

 /* Es necesario decirle a Gradle donde encontrar los archivos de origen en caso de que la estructura de carpetas 
  * para el codigo de produccion y de prueba no sea la convencional. Esto se hace a traves de la configuracion del 
  * conjunto de fuentes */
/* sourceSets {
    main.java.srcDirs = ['src']
    test.java.srcDirs = ['test']
} */
// Otra forma de especificar sin el bloque sourceSets
// sourceSets.main.java.srcDirs = ['src']

// Crea la tarea :run mas simplificado
/* run {
    classpath = sourceSets.main.runtimeClasspath // El classpath para ejecutar la clase principal
    mainClass = 'com.craivet.Main' // El nombre completo de la clase principal que se va a ejecutar
    args 'Rulo tostado' // Argumentos para pasar a la aplicacion
} */

jar {
    // Agrega el atributo manifest de la clase principal para poder ejecutar el .jar
    manifest {
        attributes 'Main-Class': 'com.craivet.ProyectoGradle'
    }
}

repositories {
    // No es buena idea agregar el repositorio local de maven
    mavenLocal() // ~/.m2/repository
    mavenCentral() // https://mvnrepository.com/repos/central
}

dependencies {
    implementation 'com.google.guava:guava:30.1-jre'
    // Framework de prueba JUnit
    testImplementation 'junit:junit:4.13.2'
}

/* Creo que esta tarea tiene que ir en la carpeta buildSrc para dejar mas limpio el build.
 * Ver: https://docs.gradle.org/current/userguide/toolchains.html */
java {
    toolchain {
        /* Verifica si java 8 esta instalado; sino lo encuentra, lo descarga desde internet (ADOPTIUM) y lo 
         * almacena en cache. Esto significa que cada vez que este proyecto compile o ejecute java, siempre
         * usara la version 8 y no la version con la que ejecuta gradle. */
        languageVersion = JavaLanguageVersion.of(8)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

// Un proyecto con un solo subproyecto llamado sub-project-1 podria configurarse en el build.gradle de nivel superior de esta manera
/* allprojects {
    apply plugin: 'java' // Manera correcta de aplicar plugins dentro del bloque allprojects y subprojects
}

subprojects {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Ahora todos los proyectos son proyectos Java, pero solo los subproyectos tienen fundbugs definida como una dependencia de implementacion
        implementation 'com.google.code.findbugs:jsr305:3.0.1'
    }
} */

// gradlew build --refresh-dependencies --info // Asegura que tiene la version mas reciente de las dependencias